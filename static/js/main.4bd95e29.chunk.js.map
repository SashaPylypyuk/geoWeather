{"version":3,"sources":["api/getWeather.ts","redux/actions.ts","components/WeatherCard.tsx","components/Spinner.tsx","components/MainPage.tsx","components/WeatherPage.tsx","components/Header.tsx","App.tsx","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["KEY","URL","getWeatherByCord","lat","lon","a","axios","get","then","res","data","console","error","getWeatherByName","q","name","getWeeklyWeather","Type","setIsLoad","isLoading","type","setWeather","weather","loadWeatherByName","dispatch","useStyles","makeStyles","cardWrapper","width","margin","bold","fontWeight","mb","marginBottom","mb3","text","fontSize","link","textDecoration","color","WeatherCard","classes","history","useHistory","Card","className","CardContent","Typography","main","temp","feels_like","humidity","CardActions","Button","size","onClick","route","push","styles","loader","Spinner","height","timeout","connect","state","length","map","key","_theme","wrapper","title","mapDispatchToProps","loadWeeklyWeather","weeklyWeather","actions","useState","currentWeather","setCurrentWeather","isWeatherIsEmpty","setWeatherEmpty","city","useParams","useEffect","loadWeekly","forEach","item","coord","formatDay","dt","result","date","Date","day","getDate","month","getMonth","hour","getHours","min","getMinutes","sec","getSeconds","daily","sunrise","sunset","max","pressure","wind_speed","form","display","justifyContent","input","minWidth","sity","setSity","toHome","onSubmit","e","preventDefault","validation","window","alert","searchSity","TextField","id","label","value","onChange","target","variant","theme","createMuiTheme","palette","primary","secondary","loadWeatherByCord","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ThemeProvider","path","exact","component","MainPage","WeatherPage","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bd95e29.chunk.js","sourcesContent":["import axios from 'axios';\nconst KEY = '15b2238ad35774d2a7d5a9f658ca6fdc';\nconst URL = 'https://api.openweathermap.org/data/2.5/';\n\nexport const getWeatherByCord = async (lat: number, lon: number) => {\n  try {\n    return await axios.get(`${URL}weather?lat=${lat}&lon=${lon}&units=metric&appid=${KEY}`).then(res => res.data);\n  }\n  catch (e) {\n    console.error(e)\n  }\n}\n\nexport const getWeatherByName = async (q: string) => {\n  try {\n    const res =  await axios.get(`${URL}weather?q=${q}&units=metric&appid=${KEY}`).then(res => res.data);\n    res.name = q;\n    return res;\n  }\n  catch (e) {\n    console.error(e)\n  }\n}\n\nexport const getWeeklyWeather = async (lat: number, lon: number, q: string) => {\n  try {\n    const res = await axios.get(`${URL}onecall?lat=${lat}&lon=${lon}&units=metric&appid=${KEY}`).then(res => res.data)\n    res.name = q;\n    return res\n  } catch (e) {\n    console.error(e)\n  }\n}\n","import { Dispatch } from 'redux';\nimport { getWeatherByCord, getWeatherByName, getWeeklyWeather } from '../api/getWeather';\n\nexport const Type = {\n  SET_IS_LOADING: 'SET_IS_LOADING',\n  SET_WEATHER: 'SET_WEATHER',\n  SET_WEEKLY_WEATHER: 'SET_WEEKLY_WEATHER'\n}\n\nexport const setIsLoad = (isLoading: boolean) => ({ type: Type.SET_IS_LOADING, isLoading });\n\nexport const setWeather = (weather: Weather) => ({\n  type: Type.SET_WEATHER,\n  weather: weather\n})\n\nexport const setWeeklyWeather = (weeklyWeather: WeeklyWeather) => ({\n  type: Type.SET_WEEKLY_WEATHER,\n  weeklyWeather: weeklyWeather\n})\n\n\nexport const loadWeeklyWeather = (lat: number, lon: number, q: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoad(true))\n\n    const res = await getWeeklyWeather(lat, lon, q);\n\n    if (res) dispatch(setWeeklyWeather(res))\n    dispatch(setIsLoad(false))\n\n    return res\n  }\n}\n\nexport const loadWeatherByCord = (lat: number, lon: number) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoad(true))\n\n    const res = await getWeatherByCord(lat, lon);\n\n    if (res) dispatch(setWeather(res))\n    dispatch(setIsLoad(false))\n\n    return res\n  }\n}\n\nexport const loadWeatherByName = (q: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoad(true))\n\n    const res = await getWeatherByName(q);\n    if (res) dispatch(setWeather(res))\n    dispatch(setIsLoad(false))\n\n    return res\n  }\n}\n","import React, { FC } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { useHistory } from 'react-router-dom';\n\ninterface Props {\n  weather: Weather\n}\n\nconst useStyles = makeStyles({\n  cardWrapper: {\n    width: '300px',\n    margin: '0px auto 20px'\n  },\n  bold: {\n    fontWeight: 'bold'\n  },\n  mb: {\n    marginBottom: 10\n  },\n  mb3: {\n    marginBottom: 30\n  },\n  text: {\n    fontSize: 14\n  },\n  link: {\n    textDecoration: 'none',\n    color: '#000'\n  }\n})\n\nconst WeatherCard: FC<Props> = ({ weather }) => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const toPage = (route: string) => {\n    history.push(`/${route}`)\n  }\n  return (\n    <div>\n      <Card className={classes.cardWrapper}>\n        <CardContent>\n          <Typography\n            className={`${classes.bold} ${classes.mb3}`}\n          >\n            {weather.name}\n          </Typography>\n          <Typography\n            className={`${classes.text} ${classes.mb}`}\n          >\n            Tempereture is: <span className={classes.bold}>{weather.main.temp}</span>\n          </Typography>\n          <Typography\n            className={`${classes.text} ${classes.mb}`}\n          >\n            Feels like: <span className={classes.bold}>{weather.main.feels_like}</span>\n          </Typography>\n          <Typography\n            className={`${classes.text} ${classes.mb}`}\n          >\n            Humidity is:<span className={classes.bold}>{weather.main.humidity}</span>\n          </Typography>\n          <CardActions>\n            <Button size=\"small\" color='primary' onClick={() => toPage(weather.name)} >\n              Click for more information\n            </Button>\n          </CardActions>\n        </CardContent>\n      </Card>\n    </div>\n\n\n);\n}\n\nexport default WeatherCard;\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Loader from \"react-loader-spinner\";\n\nconst styles = makeStyles(() => ({\n  loader: {\n    width: 50,\n    margin: '0 auto'\n  }\n}))\n\nconst Spinner = () => {\n  const classes = styles();\n\n  return (\n    <div className={classes.loader}>\n      <Loader\n        type=\"Oval\"\n        color=\"#00BFFF\"\n        height={50}\n        width={50}\n        timeout={0}\n      />\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React, { FC } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport WeatherCard from './WeatherCard';\nimport Spinner from './Spinner';\n\ninterface Props {\n  weather: Weather[],\n}\n\nconst MainPage: FC<Props> = ({ weather }) => {\n  return (\n    <div className=\"App\">\n      {weather.length ? weather!.map(weather => (\n        <WeatherCard weather={weather} key={weather.name}/>\n      )) : (\n        <Spinner />\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  weather: state.weather,\n})\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(MainPage);\n","import React, { FC, useEffect, useState } from 'react';\n\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions';\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport Spinner from './Spinner';\n\nconst useStyles = makeStyles((_theme) => ({\n  wrapper: {\n    width: 300,\n    margin: '0 auto'\n  },\n  title: {\n    fontSize: 18,\n    width: 100,\n    margin: '0 auto 50px'\n  },\n  bold: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  text: {\n    marginBottom: 20,\n    fontSize: 14\n  }\n}))\n\ninterface Props {\n  weather: Weather[]\n  weeklyWeather: WeeklyWeather[],\n  loadWeeklyWeather: (lat: number, lon: number, q: string) => void,\n  loadWeatherByName: (q: string) => void\n}\n\nconst WeatherPage: FC<Props> = ({ weather, weeklyWeather, loadWeeklyWeather, loadWeatherByName }) => {\n  const [currentWeather, setCurrentWeather] = useState<WeeklyWeather>()\n  const [isWeatherIsEmpty, setWeatherEmpty] = useState(false);\n  let { city } = useParams();\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (!weather.length) {\n      loadWeatherByName(city)\n      setWeatherEmpty(true)\n    }\n    loadWeekly();\n  }, [])\n\n  const loadWeekly = () => {\n    weather.forEach(item => {\n      if (item.name === city) {\n        loadWeeklyWeather(item.coord.lat, item.coord.lon, city)\n      }\n    })\n  }\n\n  if (isWeatherIsEmpty && weather.length) {\n    loadWeekly();\n    setWeatherEmpty(false)\n  }\n\n  if (weeklyWeather.length && !currentWeather) {\n    weeklyWeather.forEach(item => {\n      if (item) {\n        if (item.name === city){\n          setCurrentWeather(item)\n        }\n      }\n    })\n  }\n\n  const formatDay = (dt: number, type: string) => {\n    const date = new Date(dt * 1000);\n    let result;\n    switch (type) {\n      case 'day.month':\n        let day = `${date.getDate()}`;\n        if (date.getDate() <= 9) {\n          day = `0${date.getDate()}`\n        }\n\n        let month = `${date.getMonth() + 1}`\n        if (date.getMonth() <= 9) {\n          month = `0${date.getMonth() + 1}`\n        }\n        result = day + '.' + month;\n      break;\n      case 'hour:min:sec':\n        let hour = date.getHours()\n        let min = date.getMinutes()\n        let sec = date.getSeconds()\n\n        result = `${hour}:${min}:${sec}`\n      break;\n      default:\n        result = 'error';\n    }\n\n\n    return result;\n  }\n\n\n  return (\n    <div>\n      {currentWeather ? (\n        <>\n          <p className={classes.title}>\n            {currentWeather.name}\n          </p>\n          <Tabs>\n            <TabList>\n              {currentWeather.daily.map(day => (\n                <Tab key={day.dt}>\n                  {formatDay(day.dt, 'day.month')}\n                </Tab>\n              ))}\n            </TabList>\n            {currentWeather.daily.map(day => (\n              <TabPanel key={day.dt}>\n                <div className={classes.wrapper}>\n                  <p className={classes.text}>\n                    Temperature is:\n                    <span className={classes.bold}>\n                      {day.temp.day}\n                    </span>\n                    and feels like\n                    <span className={classes.bold}>\n                      {day.feels_like.day}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Sunrise at:\n                    <span className={classes.bold}>\n                      {formatDay(day.sunrise, 'hour:min:sec')}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Sunset at:\n                    <span className={classes.bold}>\n                      {formatDay(day.sunset, 'hour:min:sec')}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Min temperature is:\n                    <span className={classes.bold}>\n                      {day.temp.min}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Max tempearture is:\n                    <span className={classes.bold}>\n                      {day.temp.max}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Pressure is:\n                    <span className={classes.bold}>\n                      {day.pressure}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Humidity is:\n                    <span className={classes.bold}>\n                      {day.humidity}\n                    </span>\n                  </p>\n                  <p className={classes.text}>\n                    Wind speed is:\n                    <span className={classes.bold}>\n                      {day.wind_speed}\n                    </span>\n                  </p>\n                </div>\n              </TabPanel>\n            ))}\n          </Tabs>\n        </>\n      ) : (\n        <Spinner />\n      )}\n\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: State) => ({\n  weeklyWeather: state.weeklyWeather,\n  weather: state.weather,\n})\n\nconst mapDispatchToProps = {\n  loadWeeklyWeather: actions.loadWeeklyWeather,\n  loadWeatherByName: actions.loadWeatherByName,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherPage)\n","import React, { FC, useState, ChangeEvent, FormEvent } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions';\n\ninterface Props {\n  loadWeatherByName: (q: string) => void,\n  weather: Weather[]\n}\n\nconst useStyles = makeStyles((_theme) => ({\n  form: {\n    width: '750px',\n    margin: '30px auto 50px',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  input: {\n    minWidth: 500\n  }\n}))\n\nconst Header: FC<Props> = ({ loadWeatherByName, weather }) => {\n  const [sity, setSity] = useState('')\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => setSity(e.target.value);\n  const searchSity = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    let validation = true;\n\n    weather.forEach(item => {\n      if (item.name === sity) {\n        validation = false;\n      }\n    })\n\n    if (!validation) {\n      window.alert('Please input correct sity')\n    } else {\n      loadWeatherByName(sity);\n    }\n\n    setSity('');\n    toHome();\n  }\n  const toHome = () => {\n    history.push('/')\n  };\n  return (\n    <div>\n      <form onSubmit={(e) => searchSity(e)} className={classes.form}>\n        <TextField className={classes.input} id=\"standard-basic\" label=\"Sity\" value={sity} onChange={handleChange}/>\n        <Button type=\"submit\" color='primary' variant=\"contained\">\n          Search sity\n        </Button>\n        <Button variant=\"contained\" color='primary' type=\"button\" onClick={() => toHome()}>\n          Home\n        </Button>\n      </form>\n    </div>\n\n  )\n}\n\nconst mapStateToProps = (state: State) => ({\n  weather: state.weather,\n})\n\nconst mapDispatchToProps = {\n  loadWeatherByName: actions.loadWeatherByName,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n","import React, { FC, useEffect } from 'react';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\n\nimport MainPage from './components/MainPage';\nimport WeatherPage from './components/WeatherPage';\nimport Header from './components/Header';\n\nimport { createMuiTheme, ThemeProvider  } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2060f6',\n    },\n    secondary: {\n      main: '#2c2c2c',\n    },\n  },\n});\n\ninterface Props {\n  loadWeatherByCord: (lat: number, lon: number) => void;\n}\n\nconst App: FC<Props> = ({ loadWeatherByCord }) => {\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      loadWeatherByCord(lat, lon)\n    })\n  }, [])\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={MainPage} />\n          <Route path=\"/:city\" component={WeatherPage} />\n        </Switch>\n      </ThemeProvider>\n\n    </>\n  );\n}\n\nconst mapDispatchToProps = {\n  loadWeatherByCord: actions.loadWeatherByCord,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import { Type } from './actions';\nimport { AnyAction } from 'redux';\n\nconst initialState: State = {\n  weather: [],\n  weeklyWeather: [],\n  isLoading: false\n}\n\nexport const reducer = (state = initialState, action: AnyAction): State => {\n  switch (action.type) {\n    case Type.SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading\n      }\n    case Type.SET_WEATHER:\n      return {\n        ...state,\n        weather: [...state.weather, action.weather]\n      }\n    case Type.SET_WEEKLY_WEATHER:\n      return {\n        ...state,\n        weeklyWeather: [...state.weeklyWeather, action.weeklyWeather]\n      }\n    default:\n      return state;\n  }\n}\n\n","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducers';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}